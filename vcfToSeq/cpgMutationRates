#!/usr/bin/env python

# The purpose of this script is to separate and ask whether mutation rates
# in exons are higher than in non exons for CpG regions as was observed in
# Massey Nat Gen 2017

def runArgparse():
    print('Reading Argparse...')
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--inFiles', '-i', type=str, nargs='*', help='Specifies the input vcf file(s).')
    parser.add_argument('--inDir', '-d', type=str, help='Points to the input directory.')
    parser.add_argument('--reference', '-r', type=str, help='Point to the reference genome to be used for flanking sequence.')

    args = parser.parse_args()
    inFiles = args.inFiles
    ref = args.reference
    inDir = args.inDir

    return inFiles, ref, inDir

def readVCF(inFiles, inDir, ref, probes):
    from parseline import VCFObj
    from Bio.Seq import Seq
    from getSequence import getRefSequence
    from collections import defaultdict
    
    totalAO = defaultdict(list)
    print 'TotExon','ExonCount','TotIntr','IntrCount','Exonic','Intronic','NormExon','NormIntron'
    
    for sample in inFiles:
        totalExon = 0
        totalIntron = 0
        exonCount = 0
        intronCount = 0

        target = open(inDir + '/' + sample + '/onlyProbedRegions.vcf', 'r')
        for line in target:
            if '#' not in line and 'chr' in line: # skip the info
                lobj = VCFObj(line)

                # only C or G could be in CpG context
                if (lobj.wt == 'C' or lobj.wt == 'G') and len(lobj.var) == 1 and lobj.af < 0.1:
                    seq = getRefSequence(line, 1, ref)

                    if seq[1:3] == 'CG' or seq[1:3] == 'GC':
                        for i in probes:
                            for loc in probes[i]:
                                if str(loc) in str(lobj.location) and i[0] == 'T':
                                    exonCount += 1
                                    totalExon += lobj.ao
                                elif str(loc) in str(lobj.location) and not i[0] == 'T':
                                    intronCount += 1
                                    totalIntron += lobj.ao

        # first normalize by total number of sites in each category
        exonic = totalExon / exonCount
        intronic = totalIntron / intronCount

        # normalize to 100 percent
        normexonic = exonic / (exonic + intronic)
        normintronic = intronic / (exonic + intronic)
        print totalExon, exonCount, totalIntron, intronCount, exonic, intronic, normexonic, normintronic
        
        # append normalized results
        totalAO['Exonic'].append(normexonic)
        totalAO['Intronic'].append(normintronic)
        
        target.close()

    print totalAO
    return totalAO

def plotResults(totalAO):
    import numpy as np
    import matplotlib.pyplot as plt

    # statistics
    means = []
    stddev = []
    order = ['Intronic', 'Exonic']

    for i in order:
        means.append(np.mean(totalAO[i]))
        stddev.append(np.std(totalAO[i]))

    # plotting

    axis_font = {'fontname':'Arial', 'size':'30'}
    tick_font = {'fontname':'Arial', 'size':'30'}
    plt.errorbar(range(len(stddev)), means, yerr=stddev, linestyle='None', color='black')
    plt.bar(range(len(means)), means, color='grey')
    plt.xticks(range(len(order)), order, **tick_font)
    plt.yticks(**tick_font)
    plt.ylabel('Normalized Number of Variants', **axis_font)
    plt.xlabel('Substitution Type', **axis_font)
    plt.title('CpG Mutability By Genomic Region', **axis_font)
    plt.show()

def exportData(totalAO):
    import pickle
    p = open('cpgIntronVsExon.pkl', 'wb')
    pickle.dump(totalAO, p)
    p.close()

if __name__ == '__main__':
    print('Parsing input args...')
    inFiles, ref, inDir = runArgparse()
    probes = {'TIIIa':['1152278','1152279'],'NRAS-1':['1152564','1152565','1152566'],'NRAS-2':['1152587','1152588'],'DNMT3a':['254572','254573'],'IDH1':['2091130','2091131','2091132'],'SF3B1':['1982668','1982669'],'TIIIb':['2231906','2231907','2231908'],'TIIIc':['2290411','2290412'],'TET2-1':['1061972','1061973','1061974'],'TET2-2':['1061551','1061552'],'TIIId':['1105411','1105412','1105413'],'TIIIe':['1129972','1129973'],'TIIIf':['1211677','1211678'],'TIIIg':['1235477','1235478','1235479'],'TIIIh':['1244286','1244287'],'JAK2':['50737','50738'],'TIIIj':['21262','21263','21264'],'TIIIk':['2390'],'TIIIl':['2593','2594'],'TIIIm':['114865','114866','114867'],'HRAS':['5342','5343'],'KRAS-1':['253982','253983','253984'],'KRAS-2':['253802','253803'],'TIIIn':['925270','925271'],'IDH2':['906318','906319'],'TIIIo':['733796','733797','733798'],'TIIIp':['824550','824551'],'TIIIq':['859491','859492'],'p53-1':['75775','75776'],'p53-2':['75783','75784','75785'],'p53-3':['75770','75771','75772'],'GATA1':['486496','486497','486498']}

    print('Parsing input files...')
    # totalAO = {'intronic':[12,15], 'exonic':[14,11]}
    totalAO = readVCF(inFiles, inDir, ref, probes)
    
    print('Calculating stats and plotting...')
    plotResults(totalAO)

    print('Exporting data...')
    exportData(totalAO)
    































