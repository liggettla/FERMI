lbls <- c("Observed", "Unobserved")
pie(slices, labels = lbls, main="Oncogenic Mutations CD19 Fraction")
# Pie Charts for total mutations
slices <- c(17, 7)
lbls <- c("Observed", "Unobserved")
pie(slices, labels = lbls, main="Oncogenic Mutations Myeloid Fraction")
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
# Pie Chart with Percentages
slices <- c(18, 6)
lbls <- c("Observed", "Unobserved")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Oncogenic Mutations CD19 Fraction")
slices <- c(17, 7)
lbls <- c("Observed", "Unobserved")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Oncogenic Mutations Myeloid Fraction")
slices <- c(18, 6)
lbls <- c("Observed", "Unobserved")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Oncogenic Mutations CD19 Fraction")
# Pie Charts for total mutations
slices <- c(17, 7)
lbls <- c("Observed", "Unobserved")
pie(slices, labels = lbls, main="Oncogenic Mutations Myeloid Fraction")
# Pie Charts for total mutations
# This is the B and M data from the 3.21.2016 Library Prep
slices <- c(18, 6)
lbls <- c("Observed", "Unobserved")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Oncogenic Mutations CD19 Fraction")
# Pie Charts for total mutations
# This is the B and M data from the 3.21.2016 Library Prep
slices <- c(18, 6)
lbls <- c("Observed", "Unobserved")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Oncogenic Mutations CD19 Fraction")
# Pie Charts for total mutations
# This is the B and M data from the 3.21.2016 Library Prep
slices <- c(18, 6)
lbls <- c("Observed", "Unobserved")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Oncogenic Mutations CD19 Fraction")
View(exon.annotation)
save.image("~/RData.RData")
save.image("~/RData.RData")
source("https://bioconductor.org/biocLite.R")
biocLite("flexmix")
biocLite("RcppArmadillo")
biocLite("Rook")
biocLite("rjson")
biocLite("Cairo")
biocLite("RMTstat")
biocLite("extRemes")
biocLite("pcaMethods")
library(scde)
data(es.mef.small)
View(es.mef.small)
# factor determining cell types
sg <- factor(gsub("(MEF|ESC).*", "\\1", colnames(es.mef.small)), levels = c("ESC", "MEF"))
# the group factor should be named accordingly
names(sg) <- colnames(es.mef.small)
table(sg)
table(sg)
# clean up the dataset
cd <- clean.counts(es.mef.small, min.lib.size=1000, min.reads = 1, min.detected = 1)
o.ifm <- scde.error.models(counts = cd, groups = sg, n.cores = 1, threshold.segmentation = TRUE, save.crossfit.plots = FALSE, save.model.plots = FALSE, verbose = 1)
data(o.ifm)
View(o.ifm)
head(o.ifm)
tail(o.ifm)
valid.cells <- o.ifm$corr.a > 0
head(valid.cells)
View(valid.cells)
o.ifm <- o.ifm[valid.cells, ]
o.prior <- scde.expression.prior(models = o.ifm, counts = cd, length.out = 400, show.plot = FALSE)
# define two groups of cells
groups <- factor(gsub("(MEF|ESC).*", "\\1", rownames(o.ifm)), levels  =  c("ESC", "MEF"))
names(groups) <- row.names(o.ifm)
# run differential expression tests on all genes.
ediff <- scde.expression.difference(o.ifm, cd, o.prior, groups  =  groups, n.randomizations  =  100, n.cores  =  1, verbose  =  1)
groups <- factor(gsub("(MEF|ESC).*", "\\1", rownames(o.ifm)), levels  =  c("ESC", "MEF"))
names(groups) <- row.names(o.ifm)
ediff <- scde.expression.difference(o.ifm, cd, o.prior, groups  =  groups, n.randomizations  =  100, n.cores  =  1, verbose  =  1)
write.table(ediff[order(abs(ediff$Z), decreasing = TRUE), ], file = "results.txt", row.names = TRUE, col.names = TRUE, sep = "\t", quote = FALSE)
scde.browse.diffexp(ediff, o.ifm, cd, o.prior, groups = groups, name = "diffexp1", port = 1299)
scde.test.gene.expression.difference("Tdh", models = o.ifm, counts = cd, prior = o.prior)
batch <- as.factor(ifelse(rbinom(nrow(o.ifm), 1, 0.5) == 1, "batch1", "batch2"))
table(groups, batch)
scde.test.gene.expression.difference("Tdh", models = o.ifm, counts = cd, prior = o.prior, batch = batch)
# test for all of the genes
ediff.batch <- scde.expression.difference(o.ifm, cd, o.prior, groups = groups, batch = batch, n.randomizations = 100, n.cores = 1, return.posteriors = TRUE, verbose = 1)
data(o.ifm)
data(es.mef.small)
# factor determining cell types
sg <- factor(gsub("(MEF|ESC).*", "\\1", colnames(es.mef.small)), levels = c("ESC", "MEF"))
# the group factor should be named accordingly
names(sg) <- colnames(es.mef.small)
table(sg)
# clean up the dataset
cd <- clean.counts(es.mef.small, min.lib.size=1000, min.reads = 1, min.detected = 1)
# EVALUATION NOT NEEDED
# calculate models
# this takes a while:
o.ifm <- scde.error.models(counts = cd, groups = sg, n.cores = 1, threshold.segmentation = TRUE, save.crossfit.plots = FALSE, save.model.plots = FALSE, verbose = 1)
#http://hms-dbmi.github.io/scde/index.html
#source("https://bioconductor.org/biocLite.R")
#biocLite("edgeR")
#biocLite("flexmix")
#biocLite("RcppArmadillo")
#biocLite("Rook")
#biocLite("rjson")
#biocLite("Cairo")
#biocLite("RMTstat")
#biocLite("extRemes")
#biocLite("pcaMethods")
library(scde)
data(es.mef.small)
# factor determining cell types
sg <- factor(gsub("(MEF|ESC).*", "\\1", colnames(es.mef.small)), levels = c("ESC", "MEF"))
# the group factor should be named accordingly
names(sg) <- colnames(es.mef.small)
table(sg)
# clean up the dataset
cd <- clean.counts(es.mef.small, min.lib.size=1000, min.reads = 1, min.detected = 1)
# EVALUATION NOT NEEDED
# calculate models
# this takes a while:
# o.ifm <- scde.error.models(counts = cd, groups = sg, n.cores = 1, threshold.segmentation = TRUE, save.crossfit.plots = FALSE, save.model.plots = FALSE, verbose = 1)
# using example data:
data(o.ifm)
# filter out cells that don't show positive correlation with
# the expected expression magnitudes (very poor fits)
valid.cells <- o.ifm$corr.a > 0
table(valid.cells)
o.ifm <- o.ifm[valid.cells, ]
# estimate gene expression prior
o.prior <- scde.expression.prior(models = o.ifm, counts = cd, length.out = 400, show.plot = FALSE)
# define two groups of cells
groups <- factor(gsub("(MEF|ESC).*", "\\1", rownames(o.ifm)), levels  =  c("ESC", "MEF"))
names(groups) <- row.names(o.ifm)
# run differential expression tests on all genes.
# this takes a while:
ediff <- scde.expression.difference(o.ifm, cd, o.prior, groups  =  groups, n.randomizations  =  100, n.cores  =  1, verbose  =  1)
# write out a table with all the results, showing most significantly different genes (in both directions) on top
write.table(ediff[order(abs(ediff$Z), decreasing = TRUE), ], file = "results.txt", row.names = TRUE, col.names = TRUE, sep = "\t", quote = FALSE)
# this does not work in RStudio
# scde.browse.diffexp(ediff, o.ifm, cd, o.prior, groups = groups, name = "diffexp1", port = 1299)
# the following is an alternative to look at individual genes:
scde.test.gene.expression.difference("Tdh", models = o.ifm, counts = cd, prior = o.prior)
# correcting for batch effects
batch <- as.factor(ifelse(rbinom(nrow(o.ifm), 1, 0.5) == 1, "batch1", "batch2"))
# check the interaction between batches and cell types (shouldn't be any)
table(groups, batch)
# test the Tdh gene again
scde.test.gene.expression.difference("Tdh", models = o.ifm, counts = cd, prior = o.prior, batch = batch)
# test for all of the genes
ediff.batch <- scde.expression.difference(o.ifm, cd, o.prior, groups = groups, batch = batch, n.randomizations = 100, n.cores = 1, return.posteriors = TRUE, verbose = 1)
source("https://bioconductor.org/biocLite.R")
biocLite
biocLite()
biocLite()
biocLite()
biocLite('Rsamtools')
biocLite()
source("https://bioconductor.org/biocLite.R")
update.packages()
update.packages()
biocLite()
biocLite()
biocLite()
biocLite()
biocLite('zlibbioc')
remove.packages('zlibbioc')
remove.packages('zlibbioc', /usr/lib/R/lib)
remove.packages('zlibbioc', '/usr/lib/R/lib')
remove.packages('zlibbioc', '/usr/local/lib/R/site-library')
biocLite('zlibbioc')
biocLite('zlibbioc')
remove.packages('zlibbioc', '/usr/local/lib/R/site-library')
remove.packages('zlibbioc', '/home/alex/R/x86_64-pc-linux-gnu-library/3.3/')
biocLite()
library("XVector", lib.loc="/usr/local/lib/R/site-library")
packages.update('XVector')
View(ediff)
View(o.ifm)
View(o.prior)
data(es.mef.small)
View(es.mef.small)
2+9
library(prob)
install.packages('prob' dep = TRUE)
install.packages('prob', dep = TRUE)
library(prob)
tosscoin(1)
tosscoin(4)
rolldie(2)
head(cards())
urnsamples(1:3, size = 2, replace = TRUE, ordered = TRUE)
urnsamples(1:3, size = 2, replace = FALSE, ordered = TRUE)
urnsamples(1:3, size = 2, replace = FALSE, ordered = FALSE)
urnsamples(1:3, size = 2, replace = FALSE, ordered = TRUE)
setwd('/media/alex/Extra/Dropbox/Code/FERMI/varAlleleFrequency')
# This script plots the VAFs of each mutation found between two samples along with a regression
# line and 95% confidence interval in order to understand how repeatable the AFs are for the
# same variants between samples
# cool little script that checks if ggplot2 is already installed and if not, installs it
list.of.packages <- c("ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, dep=TRUE)
# read in the data
vafs <- read.table("outputFile", header = TRUE)
sample1 <- vafs$Sample1
sample2 <- vafs$Sample2
identity <- vafs$Identity
# read in the data
vafs <- read.table("outputFile", header = TRUE)
setwd('/media/alex/Extra/Dropbox/Code/FERMI/varAlleleFrequency')
vafs <- read.table("vafRepeatability.txt", header = TRUE)
sample1 <- vafs$Sample1
sample2 <- vafs$Sample2
identity <- vafs$Identity
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point()
library(ggplot2)
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point()
p <- ggplot(aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point()
p <- ggplot(aes(x=sample1, y=sample2, alpha=0.5, label=identity))
p <- ggplot(sample1, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_smooth(method = "lm", se = FALSE) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point()
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity))
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_smooth(method = "lm", se = FALSE) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point()
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point()
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point()
print(p)
identity <- vafs$Identity
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
geom_text(aes(label=identity),hjust=0, vjust=0)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point()
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = qsec))
print(p)
geom_point(aes(colour = identity))
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = identity))
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1))
print(p)
coef(lm(mpg ~ wt, data = vafs))
coef(lm(sample1 ~ sample2, data = vafs))
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1)) +
geom_smooth(method = "lm", se = FALSE)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1)) +
geom_smooth(method = "lm", se = TRUE)
print(p)
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
scale_fill_manual('Interval', values = c('green', 'blue'))
lm_fit  = lm(sample1 ~ sample2)
x = data.frame(vafs, predict(lm_fit, interval = 'prediction'))
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
scale_fill_manual('Interval', values = c('green', 'blue'))
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1)) +
geom_smooth(method = "lm", se = TRUE)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1)) +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
geom_abline(intercept = 0, slope = 1, se = TRUE)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1)) +
#geom_smooth(method = "lm", se = TRUE)
geom_smooth(intercept = 0, slope = 1)
print(p)
coef(lm(sample1 ~ sample2, data = vafs))
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point(aes(colour = sample1)) +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
vafs <- read.table("vafRepeatability.txt", header = TRUE)
sample1 <- vafs$Sample1
sample2 <- vafs$Sample2
identity <- vafs$Identity
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
scale_fill_manual('Interval', values = c('green', 'blue'))
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_smooth(method = "lm", se = FALSE) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability') +
geom_point()
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1)
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1) +
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability')
print(p)
lm_fit  = lm(sample1 ~ sample2)
x = data.frame(vafs, predict(lm_fit, interval = 'prediction'))
library(ggplot2)
# Note that this script cannot begin with a comment for some reason
setwd('/media/alex/Extra/Dropbox/Code/FERMI/varAlleleFrequency')
# This script plots the VAFs of each mutation found between two samples along with a regression
# line and 95% confidence interval in order to understand how repeatable the AFs are for the
# same variants between samples
# cool little script that checks if ggplot2 is already installed and if not, installs it
list.of.packages <- c("ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, dep=TRUE)
# read in the data
#vafs <- read.table("outputFile", header = TRUE)
vafs <- read.table("vafRepeatability.txt", header = TRUE)
sample1 <- vafs$Sample1
sample2 <- vafs$Sample2
identity <- vafs$Identity
# plot with 95% confidence interval
lm_fit  = lm(sample1 ~ sample2)
x = data.frame(vafs, predict(lm_fit, interval = 'prediction'))
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability (W/ Regression)') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
scale_fill_manual('Interval', values = c('green', 'blue'))
print(p)
#vafs <- read.table("outputFile", header = TRUE)
vafs <- read.table("vafRepeatability.txt", header = TRUE)
sample1 <- vafs$Sample1
sample2 <- vafs$Sample2
identity <- vafs$Identity
# plot with 95% confidence interval
lm_fit  = lm(sample1 ~ sample2)
x = data.frame(vafs, predict(lm_fit, interval = 'prediction'))
# this appears to do the same as the above
# coef(lm(sample1 ~ sample2, data = vafs))
# geom_smooth(method = "lm", se = TRUE) +
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability (W/ Regression)') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
scale_fill_manual('Interval', values = c('green', 'blue'))
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
#geom_smooth(method = "lm", se = TRUE)
geom_abline(intercept = 0, slope = 1) +
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability (No Regression)')
print(p)
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability (W/ Regression)') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
scale_fill_manual('Interval', values = c('green', 'blue'))
print(p)
p <- ggplot(vafs, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
geom_point() +
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
geom_abline(intercept = 0, slope = 1) +
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability (No Regression)')
print(p)
p <- ggplot(x, aes(x=sample1, y=sample2, alpha=0.5, label=identity)) +
#geom_text(aes(label=identity),hjust=0, vjust=0) + # this labels all points
geom_text(aes(label=ifelse(sample2>0.005,as.character(identity),'')),hjust=0,vjust=0) + # this labels points above particular frequency
xlab('Sample 1') +
ylab('Sample 2') +
labs(title = 'VAF Repeatability (W/ Regression)') +
geom_point() +
geom_smooth(method = 'lm', aes(fill = 'confidence'), alpha = 0.15) +
geom_abline(intercept = 0, slope = 1) +
scale_fill_manual('Interval', values = c('green', 'blue'))
print(p)
