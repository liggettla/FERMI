#!/usr/bin/env python

#####################
#Argparse Flag Input#
#####################
def argparse():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--input', '-i', type=str, help='Input file containing all triplet contexts from sequencing data.')
    parser.add_argument('--output', '-o', type=str, help='Output directory.')

    args = parser.parse_args()
    
    inFile = args.input
    outFile = args.output

    return inFile, outFile

def buildDict():
    probedRegions={'JAK2':'TTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTCAGGATCACAGCTAGGTGTCAGTGTAAACT',
            'TP53-1':'GTCTTCCAGTGTGATGATGGTGAGGATGGGCCTCCGGTTCATGCCGCCCATGCAGGAACTGTTACACATGTAGTTGTAGTGGATGGTGGTACAGTCAGAGCCAACCTAGGAGATAACACAGGCCCAAGATGA',
            'TP53-2':'ACCATCGCTATCTGAGCAGCGCTCATGGTGGGGGCAGCGCCTCACAACCTCCGTCATGTGCTGTGACTGCTTGTAGATGGCCATGGCGCGGACGCGGGTGCCGGGCGGGGGTGTGGAATCAACCCACAGCTGCACAGGGCAGGTCTTGGCCAGTTGGCAAAACATCTTGTTGAGGG',
            'TP53-3':'TCTGTGCGCCGGTCTCTCCCAGGACAGGCACAAACACGCACCTCAAAGCTGTTCCGTCCCAGTAGATTACCACTACTCAGGATAGGAAAAGAGAAGCAAGAGGCAGTAAGGAAATCAGGTCCTACCTGTCC',
            'NRAS-1':'ATGTATTGGTCTCTCATGGCACTGTACTCTTCTTGTCCAGCTGTATCCAGTATGTCCAACAAACAGGTTTCACCATCTATAACCACTTGTTTTCTGTAAGAATCCTGGGGGTGTGGAGGGTAAGGGGGCAGGGAGGGAGGGAAGTTCAATTTTTATTAAAAACCACAGGGAATGCAATGCTATTG',
            'NRAS-2':'TAGCTGGATTGTCAGTGCGCTTTTCCCAACACCACCTGCTCCAACCACCACCAGTTTGTACTCAGTCATTTCACACCAGCAAGAACCTGTTGGAAACCAGTAATCAGGGTTAATTGGCGAGCCACATCTACAGTACTTTAAAGCTTTCTATAATCAATGGAAATGAAAACCCTAGTGTGACCTTC',
            'HRAS':'TGGATGGTCAGCGCACTCTTGCCCACACCGCCGGCGCCCACCACCACCAGCTTATATTCCGTCATCGCTCCTCAGGGGCCTGCGGCCCGGGGTCCTCCTACAGGGTCTCCTGCCCCACCTGCCAAGGA',
            'KRAS-1':'AATTAGCTGTATCGTCAAGGCACTCTTGCCTACGCCACCAGCTCCAACTACCACAAGTTTATATTCAGTCATTTTCAGCAGGCCTTATAATAAAAATAATGAAAATGTGACTATATTAGAACATGTCACACATAAGGTTAATACACTATCAAATACTCCACCAGTACCT',
            'KRAS-2':'CATGTACTGGTCCCTCATTGCACTGTACTCCTCTTGACCTGCTGTGTCGAGAATATCCAAGAGACAGGTTTCTCCATCAATTACTACTTGCTTCCTGTAGGAATCCTGAGAAGGGAGAAACACAGTC',
            'TET2-1':'CTGACATTGGGGGAGTGGCCGTGGCTCCAACTCATGGGTCAATTCTCATTGAGTGTGCAAAGCGTGAGCTGCATGCCACAACCCCTTTAAAGAATCCCAATAGGAATCACCCCACCAGGATCTCCCTCGTCTTTTACCAGCATAAGAGCATGAATGAGCCAAAACATGG',
            'TET2-2':'GACTAAGTCCATTCCTGATACCATCACCTCCCATTTGCCAGACAGAACCTCTGGCTACAAAGCTCCAGAATGGAAGCCCACTGCCTGAGAGAGCTCATCCAGAAGTAAATGGAGACACCAAGTGGCACTCTTTCAAAAG',
            'DNMT3A':'TGACCGGCCCAGCAGTCTCTGCCTCGCCAAGCGGCTCATGTTGGAGACGTCAGTATAGTGGACTGGGAAACCAAATACCCTGGGGGAGAAAAGGCAGAGAGGGCAGGGTGAGTGCTGGCCAGACCAGGCTGCCCGGAAGCCGTCTAACCACACA',
            'IDH1':'TGCCAACATGACTTACTTGATCCCCATAAGCATGACGACCTATGATGATAGGTTTTACCCATCCACTCACAAGCCGGGGGATATTTTTGCAGATAATGGCTTCTCTGAAGACCGTGCCACCCAGAATATTTCGTATGGTGCCATTTGGTGATTTCCACATTTG',
            'IDH2':'CCTGGCCTACCTGGTCGCCATGGGCGTGCCTGCCAATGGTGATGGGCTTGGTCCAGCCAGGGACTAGGCGTGGGATGTTTTTGCAGATGATGGGCTCCCGGAAGACAGTCCCCCCCAGGATGTTCCGGATAGTTCCATTGGGACTTTTCCACATCTTCTTC',
            'GATA1':'AGCACAGCCACCGCTGCAGCTGCGGCACTGGCCTACTACAGGGACGCTGAGGCCTACAGACACTCCCCAGGTAACTCCATTGAGTGGCTGTCTTGGCATTGGCTGAGTGCTGTTGGGGTTGCCATGGAGATCCTTGGCTAGGTCAGAATACCACTGTGAGGATATCTCAGAAATGGCTGGAAG',
            'SF3B1':'GCAATGGCCAAAGCACTGATGGTCCGAACTTTCTGCTGCTCATCCACAAGACCTACAAAACCAAACACAGGTTTTAACTATGCCCCAACATTACCTAAGTTACACAATATCATCCAGATTCTCTCAATATATCAACTATTCAGCCAAACTGCAGAATATGTTCAC',
            'TIIIA':'GTCTGGCACAGATGCTAGGTCTGGGGGTCTGCTTCCCTGCTTCCAATGGCATGCGTAGCTCATTGCCACCTAATAGGCCACTAGTCTATCAGGTCCTCAAGAATGAGAGCTGGGTCTTATTCACCTTCATGTTCTCAGCACACAATGCCTAGCACAGAATAGATG',
            'TIIIB':'AAAATCAAGGCTGAGCTCACTGCCCAGCACTAGTCCTAGGAGTCCTTCTCTTCCTCTCTCCACTCTTCACAGGCGCTGCTCAGACCTCAGACCACTGCCCTTATCACTCAAGGCATTGGTGATATCATTGCTCCAAAACCCAGACTG',
            'TIIIC':'ATACAGGTTGTGGCATTATAGAAGACTAAAGTAGGAGTGACATAGAAGATAAGTATATCCAAGTATATCCATAGAAGATAAGTATATCCTGGACGTCAGCACATCCAGGAGGAGGCAGAGAAGCAACAGGTCAGGTAACTTGCCCAGACAGTCTCAGCCATTAATTTCAGAACAGGACTAAGCACCAGG',
            'TIIID':'AAACTCTTCATGCCAGTTCCCTGTCTCATCAGATAGATTCTGAGGCCTCTAGGCATCAGCCGGATATCCCTAAGGACAGTGTTGGAGGAACTGCTGAGTGGATTCATGGTCAACTACCAAGTGTTCTGTTC',
            'TIIIE':'CTCCTATCCGGCACAGCAACACCATCTGGGGCTGAATCGCAATAGCATCTCTCACCTCCTCCATATCAGATTGCTCAAGGCAAGCACTTCGCTGCAGTGCCCTCCACTCCACATTCCCTGATGCTGGTTGTTACTTGCCACAGCCAATTGAATGTATGGTGCCTGTTCTAGGC',
            'TIIIF':'TATGGCTACTGATAGCACCAACATCCATTAACTTAACTCTCACTGATCCCACCCATGCATCCAGAGGCAGCAGTATGGAGAACGTGGAGGAGGCAGACGCTGCTGTACTAACATCTCCACATAGTGCCA',
            'TIIIG':'TTGTTTGGAAGCACAGTCCTGCTTCTGAAATGCTAGGTCTGGAGGAGTTCCAGCAGCAGCCACATGGGCCCTCTCCTCAGATCTTGGCTCCAACATGGGATACTCAGCAGTGAGGCTAGAGATCAGATGTCCTTCATTCCTTGACCACTAAGCCTAGAG',
            'TIIIH':'CACTTTCTCTTCCCAACCACGTGGCTGCAGACTTCTTGCTCTCAAGTTGTCCTGACATGCTCTGAGAGCACACACAACATACATACAACACCTGGATCTGTGAATTAATTACTGCCTAGGCTACCACCAAG',
            'TIIIJ':'GGAAACCAGGCACTGTGGCCAGGCCCCTGGGAAGGGTCATGGGTGCATGCTCAGCAACCCTCGGCCATCATGTGGCTGCAGGCCCAGCCTGTTGCTAGGATTAGTCCCGGATTAGCCCACTGAGGTCCCAGAGGCTCGAGTGTCCTGGTCACCAGTGCTATAGAA',
            'TIIIK':'TCTGAGGGGACGAGATCTCCATGGGAGGGCACCACTCTGATGTCCATCCTGGGCTTCCGTGGCCCTGCCTGGCCACTGCCCGCTGCTCTTGGTCAAGATCATGGACCCTCAGAGGCCAACCAGGCCTCAGCCTGTGCCTACAGCATCCTCTCTACTGCCGGGCTTCTGAATTG',
            'TIIIL':'ACCCCCACCCGCCACTTACCGGAGTTGTGAGGAGTGGGCTATATTGAAGCCGGCCCTGTGCATGTGAACCGCGCTGGAGCGGCGTAGGACGCCCAGTGATCGCTGGGACTCGCTGCCTTAGGCGTCTGCACAGGAGGCTCCCAGCCTGCGGTTCCTGGAGCCCGACACTGTGTGTTTTCTGGCCTA',
            'TIIIM':'AGTCAAGTACACAGAGTAACTTAGAACATAAGGCAACTTCTCTATCCTCTCTACGAGGACAGAGAGAATACAGATCCCACTGGTAACCTGGGCGAGGTGCCTTGGGATGCCTGAGGAAGGTCTGTTCCCAGAT',
            'TIIIN':'GGTTTTCTAAGTCCAGTTAGAAGATATTCAACCCATGTCACATTCCTGGACCATAACATTGCTCTGATGTTGATCTAGAAGCTGCCATCTATTGTACAGTTGAATCCGTCTATGGTAACTAGGCT',
            'TIIIO':'CAGTAATGGGATGGCTGAGACCCAGCTATTTTCAATATGACGTTGATCTGTGAGTGAGAAGTCCTCTTCTCACCTGTGGTGCTTGGTGGTGCTCGGTGACACCAGCCCAGGGCCCTGCTTCCCTAGGGCACAGATGGGTCCCTGACTCAGCTGTGGCCAGAATTTAGAACATGTTGG',
            'TIIIP':'ATTAAGGATGGGGTAGTGGGCACTTACCTAGTGGCTGCAATTGAGCATCCAGGAGTAGAGTCAGGACCCAGTGCCCAGCAGGCTATTAGAGTGAAGGTCAAGCAGAGGGCAGTAGCGTAGGGTAGAAGTGAGATGTTAG',
            'TIIIQ':'GTTGTTTTCACTCCGGCTTCACAGATGAGGAGACTGAGGCTGGGAGGTTCAGGATCTCATCCAGGTCGCGCAGGCCTCTGGCTGGAGCCTGTTCTTGAGGCCTCCTTGTGCCCGGCAGCCGCCATGCTCACAGGGTCTCAGTTCTGGGAGGCCTGGGTCATGA'}

    # {kras:{1:['A'],2:['T']}}
    counter = 1
    probesAndLocs = {}

    for gene in probedRegions:
        for base in gene:
            probesAndLocs[gene] = {counter:base}
            counter += 1
    
    return probesAndLocs
'''
create a dictionary for each probe where the string is represented by char elements and keys are locations
then randomly pick a number and start at the probe
randomly pick a number and start in that location within a probe
then scan along probes until matching seq is found
'''

# output a dict with all base triplet possibilities
def generateTriplets():
    import itertools
    bases = ['T','C','G','A']
    combos = [p for p in itertools.product(bases, repeat=3)]
    triplets = {}
    
    for i in combos:
        triple = i[0] + i[1] + i[2]
        triplets[triple] = 0

    return  triplets

# counts number of instances of each triplet
def parseInput(inFile, triplets):
    total = 0
    target = open(inFile, 'r')
    for line in target:
        line = line.rstrip('\n')
        triplets[line] += 1
        total += 1

    return triplets, total

if __name__ == '__main__':
    inFile, outFile = argparse()
    triplets = generateTriplets()
    triplets, total = parseInput(inFile, triplets)
    probesAndLocs = buildDict()
    print probesAndLocs


