#!/usr/bin/env python

#####################
#Argparse Flag Input#
#####################
def argparse():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--indir', '-i', type=str, help='Input directory containing changes.txt and contexts.txt')
    parser.add_argument('--output', '-o', type=str, help='Output directory.')

    args = parser.parse_args()
    
    inDir = args.indir
    outFile = args.output

    return inDir, outFile

def buildDict():
    probedRegions={'JAK2':'TTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTCAGGATCACAGCTAGGTGTCAGTGTAAACT',
            'TP53-1':'GTCTTCCAGTGTGATGATGGTGAGGATGGGCCTCCGGTTCATGCCGCCCATGCAGGAACTGTTACACATGTAGTTGTAGTGGATGGTGGTACAGTCAGAGCCAACCTAGGAGATAACACAGGCCCAAGATGA',
            'TP53-2':'ACCATCGCTATCTGAGCAGCGCTCATGGTGGGGGCAGCGCCTCACAACCTCCGTCATGTGCTGTGACTGCTTGTAGATGGCCATGGCGCGGACGCGGGTGCCGGGCGGGGGTGTGGAATCAACCCACAGCTGCACAGGGCAGGTCTTGGCCAGTTGGCAAAACATCTTGTTGAGGG',
            'TP53-3':'TCTGTGCGCCGGTCTCTCCCAGGACAGGCACAAACACGCACCTCAAAGCTGTTCCGTCCCAGTAGATTACCACTACTCAGGATAGGAAAAGAGAAGCAAGAGGCAGTAAGGAAATCAGGTCCTACCTGTCC',
            'NRAS-1':'ATGTATTGGTCTCTCATGGCACTGTACTCTTCTTGTCCAGCTGTATCCAGTATGTCCAACAAACAGGTTTCACCATCTATAACCACTTGTTTTCTGTAAGAATCCTGGGGGTGTGGAGGGTAAGGGGGCAGGGAGGGAGGGAAGTTCAATTTTTATTAAAAACCACAGGGAATGCAATGCTATTG',
            'NRAS-2':'TAGCTGGATTGTCAGTGCGCTTTTCCCAACACCACCTGCTCCAACCACCACCAGTTTGTACTCAGTCATTTCACACCAGCAAGAACCTGTTGGAAACCAGTAATCAGGGTTAATTGGCGAGCCACATCTACAGTACTTTAAAGCTTTCTATAATCAATGGAAATGAAAACCCTAGTGTGACCTTC',
            'HRAS':'TGGATGGTCAGCGCACTCTTGCCCACACCGCCGGCGCCCACCACCACCAGCTTATATTCCGTCATCGCTCCTCAGGGGCCTGCGGCCCGGGGTCCTCCTACAGGGTCTCCTGCCCCACCTGCCAAGGA',
            'KRAS-1':'AATTAGCTGTATCGTCAAGGCACTCTTGCCTACGCCACCAGCTCCAACTACCACAAGTTTATATTCAGTCATTTTCAGCAGGCCTTATAATAAAAATAATGAAAATGTGACTATATTAGAACATGTCACACATAAGGTTAATACACTATCAAATACTCCACCAGTACCT',
            'KRAS-2':'CATGTACTGGTCCCTCATTGCACTGTACTCCTCTTGACCTGCTGTGTCGAGAATATCCAAGAGACAGGTTTCTCCATCAATTACTACTTGCTTCCTGTAGGAATCCTGAGAAGGGAGAAACACAGTC',
            'TET2-1':'CTGACATTGGGGGAGTGGCCGTGGCTCCAACTCATGGGTCAATTCTCATTGAGTGTGCAAAGCGTGAGCTGCATGCCACAACCCCTTTAAAGAATCCCAATAGGAATCACCCCACCAGGATCTCCCTCGTCTTTTACCAGCATAAGAGCATGAATGAGCCAAAACATGG',
            'TET2-2':'GACTAAGTCCATTCCTGATACCATCACCTCCCATTTGCCAGACAGAACCTCTGGCTACAAAGCTCCAGAATGGAAGCCCACTGCCTGAGAGAGCTCATCCAGAAGTAAATGGAGACACCAAGTGGCACTCTTTCAAAAG',
            'DNMT3A':'TGACCGGCCCAGCAGTCTCTGCCTCGCCAAGCGGCTCATGTTGGAGACGTCAGTATAGTGGACTGGGAAACCAAATACCCTGGGGGAGAAAAGGCAGAGAGGGCAGGGTGAGTGCTGGCCAGACCAGGCTGCCCGGAAGCCGTCTAACCACACA',
            'IDH1':'TGCCAACATGACTTACTTGATCCCCATAAGCATGACGACCTATGATGATAGGTTTTACCCATCCACTCACAAGCCGGGGGATATTTTTGCAGATAATGGCTTCTCTGAAGACCGTGCCACCCAGAATATTTCGTATGGTGCCATTTGGTGATTTCCACATTTG',
            'IDH2':'CCTGGCCTACCTGGTCGCCATGGGCGTGCCTGCCAATGGTGATGGGCTTGGTCCAGCCAGGGACTAGGCGTGGGATGTTTTTGCAGATGATGGGCTCCCGGAAGACAGTCCCCCCCAGGATGTTCCGGATAGTTCCATTGGGACTTTTCCACATCTTCTTC',
            'GATA1':'AGCACAGCCACCGCTGCAGCTGCGGCACTGGCCTACTACAGGGACGCTGAGGCCTACAGACACTCCCCAGGTAACTCCATTGAGTGGCTGTCTTGGCATTGGCTGAGTGCTGTTGGGGTTGCCATGGAGATCCTTGGCTAGGTCAGAATACCACTGTGAGGATATCTCAGAAATGGCTGGAAG',
            'SF3B1':'GCAATGGCCAAAGCACTGATGGTCCGAACTTTCTGCTGCTCATCCACAAGACCTACAAAACCAAACACAGGTTTTAACTATGCCCCAACATTACCTAAGTTACACAATATCATCCAGATTCTCTCAATATATCAACTATTCAGCCAAACTGCAGAATATGTTCAC',
            'TIIIA':'GTCTGGCACAGATGCTAGGTCTGGGGGTCTGCTTCCCTGCTTCCAATGGCATGCGTAGCTCATTGCCACCTAATAGGCCACTAGTCTATCAGGTCCTCAAGAATGAGAGCTGGGTCTTATTCACCTTCATGTTCTCAGCACACAATGCCTAGCACAGAATAGATG',
            'TIIIB':'AAAATCAAGGCTGAGCTCACTGCCCAGCACTAGTCCTAGGAGTCCTTCTCTTCCTCTCTCCACTCTTCACAGGCGCTGCTCAGACCTCAGACCACTGCCCTTATCACTCAAGGCATTGGTGATATCATTGCTCCAAAACCCAGACTG',
            'TIIIC':'ATACAGGTTGTGGCATTATAGAAGACTAAAGTAGGAGTGACATAGAAGATAAGTATATCCAAGTATATCCATAGAAGATAAGTATATCCTGGACGTCAGCACATCCAGGAGGAGGCAGAGAAGCAACAGGTCAGGTAACTTGCCCAGACAGTCTCAGCCATTAATTTCAGAACAGGACTAAGCACCAGG',
            'TIIID':'AAACTCTTCATGCCAGTTCCCTGTCTCATCAGATAGATTCTGAGGCCTCTAGGCATCAGCCGGATATCCCTAAGGACAGTGTTGGAGGAACTGCTGAGTGGATTCATGGTCAACTACCAAGTGTTCTGTTC',
            'TIIIE':'CTCCTATCCGGCACAGCAACACCATCTGGGGCTGAATCGCAATAGCATCTCTCACCTCCTCCATATCAGATTGCTCAAGGCAAGCACTTCGCTGCAGTGCCCTCCACTCCACATTCCCTGATGCTGGTTGTTACTTGCCACAGCCAATTGAATGTATGGTGCCTGTTCTAGGC',
            'TIIIF':'TATGGCTACTGATAGCACCAACATCCATTAACTTAACTCTCACTGATCCCACCCATGCATCCAGAGGCAGCAGTATGGAGAACGTGGAGGAGGCAGACGCTGCTGTACTAACATCTCCACATAGTGCCA',
            'TIIIG':'TTGTTTGGAAGCACAGTCCTGCTTCTGAAATGCTAGGTCTGGAGGAGTTCCAGCAGCAGCCACATGGGCCCTCTCCTCAGATCTTGGCTCCAACATGGGATACTCAGCAGTGAGGCTAGAGATCAGATGTCCTTCATTCCTTGACCACTAAGCCTAGAG',
            'TIIIH':'CACTTTCTCTTCCCAACCACGTGGCTGCAGACTTCTTGCTCTCAAGTTGTCCTGACATGCTCTGAGAGCACACACAACATACATACAACACCTGGATCTGTGAATTAATTACTGCCTAGGCTACCACCAAG',
            'TIIIJ':'GGAAACCAGGCACTGTGGCCAGGCCCCTGGGAAGGGTCATGGGTGCATGCTCAGCAACCCTCGGCCATCATGTGGCTGCAGGCCCAGCCTGTTGCTAGGATTAGTCCCGGATTAGCCCACTGAGGTCCCAGAGGCTCGAGTGTCCTGGTCACCAGTGCTATAGAA',
            'TIIIK':'TCTGAGGGGACGAGATCTCCATGGGAGGGCACCACTCTGATGTCCATCCTGGGCTTCCGTGGCCCTGCCTGGCCACTGCCCGCTGCTCTTGGTCAAGATCATGGACCCTCAGAGGCCAACCAGGCCTCAGCCTGTGCCTACAGCATCCTCTCTACTGCCGGGCTTCTGAATTG',
            'TIIIL':'ACCCCCACCCGCCACTTACCGGAGTTGTGAGGAGTGGGCTATATTGAAGCCGGCCCTGTGCATGTGAACCGCGCTGGAGCGGCGTAGGACGCCCAGTGATCGCTGGGACTCGCTGCCTTAGGCGTCTGCACAGGAGGCTCCCAGCCTGCGGTTCCTGGAGCCCGACACTGTGTGTTTTCTGGCCTA',
            'TIIIM':'AGTCAAGTACACAGAGTAACTTAGAACATAAGGCAACTTCTCTATCCTCTCTACGAGGACAGAGAGAATACAGATCCCACTGGTAACCTGGGCGAGGTGCCTTGGGATGCCTGAGGAAGGTCTGTTCCCAGAT',
            'TIIIN':'GGTTTTCTAAGTCCAGTTAGAAGATATTCAACCCATGTCACATTCCTGGACCATAACATTGCTCTGATGTTGATCTAGAAGCTGCCATCTATTGTACAGTTGAATCCGTCTATGGTAACTAGGCT',
            'TIIIO':'CAGTAATGGGATGGCTGAGACCCAGCTATTTTCAATATGACGTTGATCTGTGAGTGAGAAGTCCTCTTCTCACCTGTGGTGCTTGGTGGTGCTCGGTGACACCAGCCCAGGGCCCTGCTTCCCTAGGGCACAGATGGGTCCCTGACTCAGCTGTGGCCAGAATTTAGAACATGTTGG',
            'TIIIP':'ATTAAGGATGGGGTAGTGGGCACTTACCTAGTGGCTGCAATTGAGCATCCAGGAGTAGAGTCAGGACCCAGTGCCCAGCAGGCTATTAGAGTGAAGGTCAAGCAGAGGGCAGTAGCGTAGGGTAGAAGTGAGATGTTAG',
            'TIIIQ':'GTTGTTTTCACTCCGGCTTCACAGATGAGGAGACTGAGGCTGGGAGGTTCAGGATCTCATCCAGGTCGCGCAGGCCTCTGGCTGGAGCCTGTTCTTGAGGCCTCCTTGTGCCCGGCAGCCGCCATGCTCACAGGGTCTCAGTTCTGGGAGGCCTGGGTCATGA'}

    # probesAndLocs = {kras:[(1, 'A'), (2, 'T')]}
    probesAndLocs = {}

    for gene in probedRegions:
        seq = list(enumerate(list(probedRegions[gene])))
        probesAndLocs[gene] = seq
        
    return probesAndLocs
'''
create a dictionary for each probe where the string is represented by char elements and keys are locations
then randomly pick a number and start at the probe
randomly pick a number and start in that location within a probe
then scan along probes until matching seq is found
'''

# output a dict with all base triplet possibilities
def generateTriplets():
    from itertools import product
    bases = ['T','C','G','A']
    combos = [p for p in product(bases, repeat=3)]
    triplets = {}
    
    for i in combos:
        triple = i[0] + i[1] + i[2]
        triplets[triple] = {'T':0,'C':0,'G':0,'A':0}

    # triplets = {'TCT':{'T':0,'C':0,'G':0,'A':0}}
    return  triplets

# counts number of instances of each triplet
def parseInput(inDir, triplets):
    from itertools import izip
    total = 0
    contexts = open(inDir + '/contexts.txt', 'r')
    changes = open(inDir + '/changes.txt', 'r')

    for i, j in izip(contexts, changes):
        i = i.rstrip('\n')
        j = j.rstrip('\n')
        triplets[i][j] += 1
        total += 1

    return triplets, total

def getStart(probesAndLocs):
    from random import randint
    from random import seed
    #seed(10)
    length = len(probesAndLocs) - 1
    index = randint(0,length)
    gene = ''

    # get random gene
    count = 0
    for i in probesAndLocs:
        if count == index:
            gene = i
        count += 1

    # get random locus
    readLength = len(probesAndLocs[gene]) - 1
    locus = randint(0,readLength)

    return gene, locus

if __name__ == '__main__':
    inDir, outFile = argparse()
    triplets = generateTriplets()
    # triplets = {'TCT':{'T':0,'C':0,'G':0,'A':0}}
    triplets, total = parseInput(inDir, triplets)
    # probesAndLocs = {kras:[(1, 'A'), (2, 'T')]}
    probesAndLocs = buildDict()
    gene, locus = getStart(probesAndLocs)
    print gene, locus


