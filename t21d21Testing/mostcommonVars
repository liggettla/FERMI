#!/usr/bin/env python
# the purpose of this script is to analyze samples for selection of T21 mutations

def runArgparse():
    ############
    # Argparse #
    ############
    import argparse
    from numpy import mean

    parser = argparse.ArgumentParser()
    parser.add_argument('--indir', '-i', type=str, required=True, help='Input directory containing the vcf files to be analyzed: /dir.')
    parser.add_argument('--samples', '-s', type=str, nargs='*', required=True, help='List of samples to be averaged and compared to the principle sample. Ex: A1-R1.')
    parser.add_argument('--limit', '-l', type=float, help='This will set a VAF maximum to eliminate germline mutations if desireable.')
    parser.add_argument('--reference', '-r', type=str, help='This points to the reference geneome to be used in identifying flanking sequence.')
    parser.add_argument('--loadolddata', '-o', action='store_true', help='Load previously existing data.')

    args = parser.parse_args()

    indir = args.indir
    samples = args.samples
    if args.limit:
        limit = args.limit
    else:
        limit = 1
    ref = args.reference
    if args.loadolddata:
        load = True
    else:
        load = False

    return indir, samples, limit, ref, load

def readData(indir, samples, probes, ref, load):

    if not load:
        allVariants = populatePandasDataframe(indir, samples, probes, ref, upstream=1, downstream=1)
        saveData(allVariants, 'mostCommon')
    elif load:
        allVariants = loadData('mostCommon')

    return allVariants

# this will identify the most common variants below a certain VAF
# the idea is to identify common oncogenic mutations carried by a cancer
# and then identify what mutations rebound after therapy
def identifyCommonVars(allVariants, samples):
    for sample in range(len(samples)):
        filtered = allVariants[allVariants['Individual'] == sample + 1]
        sorteddf = filtered.sort(['VAF'], ascending=[0])
        print sorteddf.head(n=15)
        
# the purpose here is to compare T21 to D21 to look for differential
# selection of GATA
def lookatGata(allVariants, samples):
    from collections import defaultdict
    # first just look at overall average
    sampleID = {'T21':['66.fastq','70.fastq'], 'D21':['64.fastq','65.fastq','67.fastq','69.fastq'], 'T21-AML':['68.fastq']}
    gata = allVariants[allVariants['Gene'] == 'GATA1']
    totalAvg = defaultdict(list)

    for individual in samples:
        for i in sampleID:
            if individual in sampleID[i]:
                genotype = i
                x = gata[gata['Individual'] == samples.index(individual) + 1]
                totalAvg[i].append(x[x['Chrom'] == 'chrX']['VAF'].mean())

    print totalAvg

    from util import plotData
    labels = ['D21','T21','T21-AML']
    means = []
    std = []
    for i in labels:
        means.append(np.mean(totalAvg[i]))
        std.append(np.std(totalAvg[i]))
    
    colors = ['grey','grey','grey']
    xlabel = 'Type of Individual'
    ylabel = 'Mean VAF'
    title = 'GATA1 Selection'
    plotData(means, std, colors, labels, xlabel, ylabel, title)

# this looks at individual mutations within GATA1
def allGATA(allVariants, samples):
    df = allVariants
    df['newindex']=df['Loc'].astype(str) + df['Change'] + df['Chrom']
    df['uniques']=df['Loc'].astype(str) + df['Change'] + df['Chrom'] + '_' + df['Individual'].astype(str)
    x=df[df['Gene']=='GATA1']
    x=x.drop_duplicates(subset='uniques')
    x=x.pivot(index='newindex', columns='Individual', values='VAF')
    x['Mean']=x[[1,2,3,4,5,6,7]].mean(axis=1)
    x['Std']=x[[1,2,3,4,5,6,7]].std(axis=1)
    x=x.sort_values(['Std'], ascending=False)

# this just yields a DataFrame that is pivotted to use individuals as columns and VAF as values
def compareVAF(allVariants, samples):
    x = allVariants
    x = x.set_index(['uniques'])
    x = x[~x.index.duplicated(keep='first')]
    x = x.pivot(index='newindex', columns='Individual', values='VAF')

    return x



    


        

        


if __name__ == '__main__':
    from util import defineProbes
    from util import populatePandasDataframe
    from util import saveData
    from util import loadData
    import pandas as pd
    import numpy as np

    indir, samples, limit, ref, load = runArgparse()
    probes = defineProbes()
    allVariants = readData(indir, samples, probes, ref, load)

    # analysis of results
    #identifyCommonVars(allVariants, samples)
    #lookatGata(allVariants, samples)
    allGATA(allVariants, samples)
    compareVAFs = compareVAF(allVariants, samples)
